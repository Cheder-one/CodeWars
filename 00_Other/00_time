1) 8 kyu 06_Sum of positive 
   - 16min (30min - all)
---------
2) 7 kyu Digit*Digit 
   - 7min (11min - all; 2min - read)
---------
3) 6 kyu Stop gninnipS My sdroW!
   - 13min (22min - all; 5min - read)
---------
4) 6 kyu Roman Numerals Decoder 
   - 42min (1h 8min - all; 3min - read)
---------
5) 6 kyu Create Phone Number
   - ~ 1h 8min (...)
---------
6) 7 kyu Highest and Lowest
   - 6min
---------
6) 4 kyu Snake
   - 2h (... not solved)
---------
8) 6 kyu Find the odd int
   - 18min - after rest (43min - all)
---------
9) 6 kyu Digital Root
   - 1h 24min (1h 40min - all) (...)
---------
10) 7 kyu Descending Order
   - 4min - after 1h rest (4min - all)
---------
11) 4 kyu Strip Comments
   - 25min (AI solve+hint) (1h 30min - not solved; 40min after AI hints) 
---------
12) 7 kyu Mumbling
   - 30min (50min - all + refactoring)
---------
13) 7 kyu You're a square!
   - 1h 40min (2h - all) (...) Не сиди, не тупи! Гугли!
---------
1) Иди от простого к сложному. 
   0. Упрощай! Упрощай до тех пор и масштабов, пока не станет понятно что происходит и как это решать.
   1. Распиши что тебе нужно сделать и как сделать.
      - Пиши с разговорной форме, в форме диалога-рассуждения с собой.
   2. Погрузись в Медитацию
      - Для обдумывания вариантов сядь в медитацию, в позу дзадзен. 
   3. Отследи свою логическую цепочку, которая позволяет понять конечный результат. Перенеси эту логику в код.
      - (Исходные данные задачи должны быть для тебя интуитивно непонятны, ты должен ощущать себя на месте непонимающей что делать машины. Например, 3е наибольшее среди [1, 2, 3, 4, 5]интуитивно понятно. А пример [52, 352, 574, 346, 594] уже лучше. 
      Для отслеживания полноценной логической цепочки пример должен заставить идти с пункта 0 и до конечного результата. Тогда ты сможешь записать свою логику.)
   4. Вручную пропиши в clg как должны проходить вызовы.
   5. На этой основе начни писать автоматизацию.
      - Сделай через элементарные циклы и тд.
2) Если идет очень сложно/завис/какая-то лажа
   - Загугли! Скорее всего уже придумали короткое и простое решение.
   - Воспользуйся Дебагером.
   - Взбодрись! Разозлись, напрягись!
   - Переименуй переменные. Ты не должен в них путаться
   - Пиши комментарии в коде. 1) Что делаешь 2) Что будем делать далее
3) Рефакторинг
   - Подумай как можно заменить громоздкие конструкции понятными и короткими методами.
4) Если совсем никак
   - Попроси решение в виде слов/кода у нейросети. 
      Разбери код, повтори его самостоятельно.
   - Попроси улучшить код / Оптимизировать методами.
   - Отдохни 10-30 минут в тишине. 
   - Не объедайся! Тем более Не ешь сладкое.
---------
14) `Easy; Accept:40.8%` Longest Common Prefix
   - 3h 52min (6h - all; 52min - solved on the 2nd day )
---------
15) 6 kyu Who likes it?
   - 15min (difficulty 8 kyu)
---------
16) 6 kyu Bit Counting
   - 25min
---------
17) 6 kyu Find The Parity Outlier
   - 48min (1h 33min - all + refactoring)
---------
18) 6 kyu Unique In Order
   - 35min (2h 10min - all; 35min - refactoring)
---------
19) 6 kyu Counting Duplicates
   - ~ 2h
---------
3. Декомпозиция

Этот метод является краеугольным камнем решения задач. Запомните это (перечитайте этот шаг, если нужно).

    Если я мог бы научить каждого молодого программиста навыкам решения задач, это уменьшило бы количество технического долга.

    Предположим, что необходимо написать программу, которая берет 10 цифр и возвращает третье по величине. Для новичка это может стать сложной задачей, хотя требует только знаний базового синтаксиса.

    Если вы застряли, то надо упрощать. Вместо третьего по величине числа, как насчет нахождения самого большого? Все еще слишком сложно? Как найти самое большое из трех чисел? Или больше из двух?

    Уменьшайте задачу пока не поймете как её решить. Запишите решение. Затем разворачивайте задачу до момента, пока не вернетесь к начальному вопросу.
---------
17) `Easy` Merge Two Sorted Lists
   - 3h 34min (4h 34min - all (1h refactoring))
---------
18) 6 kyu Replace With Alphabet Position
   - 1h 30min (10min - refactoring)
---------
19) 6 kyu Duplicate Encoder
   - 50min 
---------
20) 6 kyu Decode the Morse code 
   - 46min
---------
21) 6 kyu Tribonacci Sequence
   - 50min
---------
22) 6 kyu Xbonacci
   - 50min
---------
23) Easy Plus One
   - 55min
---------
24) Easy Sqrt(x)
   - 50min
---------
25) 5 kyu Moving Zeros To The End
   40min (...)
---------
26) 6 kyu Take a Ten Minutes Walk
   - 45min
---------
27) 5(8) kyu Simple Pig Latin
   - 17min
---------
28) 4(5) kyu Human readable duration format
   - 3h 24min
---------
29) 6(8) kyu Persistent Bugger
   - 20min
---------
30) 6(7) kyu Your order, please
   - 18min + (5min refactoring)
---------
31) 6(7) kyu Does my number look big in this?
   - 25min + (5min refactoring)
---------
32) 6 kyu Detect Pangram
   - 12min
---------
33) 6 kyu Playing with digits
   - 33min
---------
34) 5 kyu Rot13
   - 1h 44min + (50min refactoring) 
---------
35) 6 kyu Find the unique number
   - 40min + (20min refactoring)
---------
36) 6 kyu Equal Sides Of An Array
   - 4h ....
---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------


---------